import { WebSocketGateway, WebSocketServer, SubscribeMessage, OnGatewayConnection, OnGatewayDisconnect, WsException } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Channel } from 'src/entities/channel.entity';
import { Message } from 'src/entities/message.entity';
import { User } from 'src/entities/user.entity';

const channelRoomPrefix = "channel_";

@WebSocketGateway()
export class ChatGateway {

  @WebSocketServer() private io: Server;

  async error(client: Socket, msg: string = ''): Promise<any> {
    client.emit('error', msg);
    return null;
  }

  //  Processes clients ping responses.
  @SubscribeMessage('pong')
  async pong(client: Socket) {
    client.data.pingOK = true;
  }

  //  ********** CORE MESSAGING SERVICE **********

  //  Processes a new message sent by a client (either to a channel or directly to a username)
  //  A Message entity in JSON format is expected as data.
  //
  //  For a direct message, omit channel and set the message <recipient> property as a partial User ( with a user login for example ) 
  //
  @SubscribeMessage('msg')
  async msg(client: Socket, rawData: string): Promise<Message> {
    try {
      const user = await User.findOneBy({ft_login: client.data.login});
      const data = JSON.parse(rawData);
      data.id = undefined;  //  Supresses the message id to always consider it as a new message.
      data.time = undefined;  //  Supresses the message timestamp to let it be autogenerated.
      data.sender = undefined;  //  Supresses the sender to always consider it as the socket client.
      let message = Message.create(data);
      message.sender = user;
      if (data.channel) {
        message.channel = await Channel.findOne({where: data.channel});
        if (!message.channel) {
          console.log('Message channel was not found !');
          return this.error(client, "Message channel was not found !");
        }
        if (!message.channel.canSpeak(user))
          return this.error(client, "You cannot speak in this channel !");
        message = await message.save();
				this.io.in(channelRoomPrefix + message.channel.id).emit('msg', JSON.stringify(message));
				return message;
      }
      else if (data.recipient) {
        console.log('direct mode');
        const recipient = await User.findOne({where: data.recipient});
        if (!recipient) {
          console.log('Message recipient was not found !');
          return this.error(client, "Message Recipient was not found !");
        }
        message.channel = await Channel.getDirectChannel(recipient, user, false);
				this.io.in(channelRoomPrefix + message.channel.id).emit('msg', JSON.stringify(await message.save()));
        message.channel = await Channel.getDirectChannel(user, recipient, true);
				message = await message.save();
				this.io.in(channelRoomPrefix + message.channel.id).emit('msg', JSON.stringify(message));
				return message;
      }
      else
        return this.error(client, "Invalid message submitted");
    }
    catch (e) {
      this.error(client, e.name + " : " + e.message);
      console.error("[ERROR] " + e.stack)
    }
  }

  @SubscribeMessage('chanlist')
  async chanlist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('publiclist')
  async publiclist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('userlist')
  async joinedlist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('invitelist')
  async invitelist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('names')
  async names(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  //  For
  @SubscribeMessage('mode')
  async mode(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

}
