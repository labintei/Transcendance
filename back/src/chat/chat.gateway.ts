import { WebSocketGateway, WebSocketServer, SubscribeMessage, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Channel } from 'src/entities/channel.entity';
import { Message } from 'src/entities/message.entity';
import { User } from 'src/entities/user.entity';

const channelRoomPrefix = "channel_";
const pingTimeout = 100000;//5000;

@WebSocketGateway({ transports: ['websocket'] })
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {

  @WebSocketServer() private io: Server;

  async handleConnection(client: Socket) {
    const user = await User.findOneBy({ft_login: (client.request as any).user});
    client.data.login = user.ft_login;
    console.log('Websocket Client Connected : ' + user.ft_login);
    user.socket = client.id;
    user.status = User.Status.ONLINE;
    user.save();

    client.data.pingOK = true;
    this.ping(client);
  }

  async handleDisconnect(client: Socket) {
    const user = await User.findOneBy({ft_login: (client.request as any).user});
    console.log('Websocket Client Disconnected : ' + user.ft_login);
    user.socket = null;
    user.status = User.Status.OFFLINE;
    user.save();
  }

  async ping(client: Socket) {
    if (!client.data.pingOK)
      client.disconnect(true);
    else {
      client.data.pingOK = false;
      client.emit('ping');
      setTimeout(() => {
        this.ping(client)
      }, pingTimeout);
    }
  }

  async error(client: Socket, msg: string = '') {
    client.emit('error', msg);
  }

  //  Processes clients ping responses.
  @SubscribeMessage('pong')
  async pong(client: Socket) {
    client.data.pingOK = true;
  }

  //  ********** CORE MESSAGING SERVICE **********

  //  Processes a new message sent by a client (either to a channel or directly to a username)
  //  A Message entity in JSON format is expected as data.
  //
  //  For a direct message, omit channel and set the message recipient property as a partial User ( with user login for example )
  //
  @SubscribeMessage('msg')
  async privmsg(client: Socket, rawData: string) {
    try {
      const data = JSON.parse(rawData);
      console.log(data);
      data.id = undefined;  //  Supresses the message id to always consider it as a new message.
      data.time = undefined;  //  Supresses the message timestamp to let it be autogenerated.
      data.sender = undefined;  //  Supresses the sender to always consider it as the socket client.
      const message = Message.create(data);
      console.log(await message.save());
      if (message.channel) {
        message.channel = await Channel.preload(message.channel);
        if (!message.channel) {
          console.log('Channel not found');
          return this.error(client, "Message Channel was not found !");
        }
        message.sender = client.data.login;
        console.log(message);
        //  Channel message process here.
      }
      else if (data.recipient !== undefined) {

      }
      else
        return this.error(client, "Im message submitted");
    }
    catch (e) {
      this.error(client, e.name + " : " + e.message);
      console.error("[ERROR] " + e.stack)
    }
  }

  @SubscribeMessage('publiclist')
  async chanlist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('userlist')
  async joinedlist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('invitelist')
  async invitelist(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  @SubscribeMessage('names')
  async names(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }

  //  For
  @SubscribeMessage('mode')
  async mode(client: Socket, rawData: string) {
    console.log(JSON.parse(rawData));
  }


}
